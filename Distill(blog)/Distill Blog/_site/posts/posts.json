[
  {
    "path": "posts/2021-03-02-gitgithub/",
    "title": "Git GitHub",
    "description": "Aprenderás a utilizar los comandos básicos para Git y GitHub. Será muy fácil trabajar proyectos que involucren código en equipo.",
    "author": [
      {
        "name": "Carlos & Yanely",
        "url": {}
      }
    ],
    "date": "2021-02-20",
    "categories": [],
    "contents": "\r\n\r\n  #TOC {\r\n    color: #724401;\r\n    font-size: 16px;\r\n    background-color: #FBECD1;\r\n    border-color: #958303;\r\n  }\r\n  h1.title {\r\n    color: #6D4101;\r\n    background-color: #FDFBEF;\r\n    opacity: 0.9;\r\n    font-size: 50px;\r\n  }\r\n  h4.author {\r\n    color: #012A6D;\r\n    background-color: #FDFBEF;\r\n    font-size: 30px;\r\n  }\r\n  h4.date {\r\n    color: #7299D9;\r\n    background-color: #FDFBEF;\r\n  }\r\n  body {\r\n    color: #08142A;\r\n    background-color: #FDFBEF;\r\n  }\r\n  pre {\r\n    color: #08142A;\r\n    background-color: #FEF9D7;\r\n  }\r\n\r\n\r\n¿Qué es Git y para qué sirve?\r\nEs un controlador de versiones (de código) esto quiere decir que se puede dar seguimiento a los cambios que se hagan en los archivos de código que pueden ser con lenguaje de R, Python, Java, entre muchos otros. Su importancia radica en que podemos rastrear todos los cambios: desde que subimos el primer código, lo modificamos-cargamos, hasta que terminamos el proyecto. Esto implica que se pueden rastrear errores por la fecha en que se “subió-cargó” el código y a hacer cambios desde alguna de las versiones anteriores.\r\nEl objetivo de este tutorial es que se aprendan las herramientas necesarias para realizar trabajo en equipo donde se use código de manera remota.\r\nPensemos en una situación donde un grupo de personas desea realizar un proyecto para un análisis estadístico con R pero no se pueden reunir por cuestiones de una pandemia y tienen horarios difíciles de ajustar para conectarse a trabajar a la misma hora. Las personas se podrían organizar de diversas formas como crear grupos en plataformas de Facebook, Slack, WhatsApp, etcétera, sin embargo, el manejo del archivo base (el código de R) sería impráctico y muy ineficiente. Es por lo anterior que trabajar con Git y GitHub permitirá facilitar el manejo del archivo principal (o los múltiples archivos) sin necesidad de mandar distinas versiones por mensaje de texto, trabajar en el mismo horario o por turnos. Estas plataformas facilitan el desarrollo de proyectos que involucren código con orden y a gran escala.\r\nInstalar Git en Windows\r\nIr a la URL para iniciar la descarga de Git para Windows.\r\nUna vez descargado el programa, ejecutarlo y seguir los pasos que se muestran. Cuando aparezca la ventana “Completing the Git Setup Wizard”, seleccionar solo la opción “Launch Git Bash” y dar clic en finalizar.\r\n\r\n\r\n\r\n\r\nPara configurar Git en tu computadora ingresamos el siguiente comando en Git Bash:\r\ngit config --global user.name \"tu user_name\"\r\ny posteriormente el comando\r\ngit config --global user.mail tu_email@mail.com\r\nInstalar Git en Mac Eduardo\r\nConceptos básicos\r\nDirectorio: mejor conocido como carpeta o folder, el directorio contiene los archivos de los cuales se desea tener el control de versiones.\r\n\r\n\r\n\r\n\r\nTerminal o linea de comandos. Es una interface de texto donde se escriben los comandos que posteriormente usaremos para tener el control de los archivos y la modificación de los mismos.\r\nPara poder hacer uso de la terminal basta poner el buscador de Windows GitBash y dar click. Entonces aparecerá la terminal donde se escribirán todos los comandos.\r\n\r\n\r\n\r\n\r\nLínea de comandos: se compone de comandos como git status o cd \\Documentos\r\ncd\r\ncd: permite cambiar de directorio, lo que es equivalente a un doble click para entrar en una carpeta. Por ejemplo, escribir cd Documentos permitirá ingresar a la carpeta llamada “Documentos”. Hint: si el nombre de tu carpeta es demasiado grande, basta escribir cd, luego las primeras dos letras del nombre de la carpeta a la cual quieres llegar y por último oprimir la tecla tabulador. El tabulador completa el nombre haciendo la escritura eficiente.\r\nclear: funciona para eliminar las líneas de código que se han escrito en la terminal hasta el momento. Esto solo es visual, no quita las instrucciones previas, solo “limpia” la terminal.\r\nEs importante aprender a usar la “Terminal” y sus comandos porque a partir de ellos se hace más fácil la instalación de programas o su “lectura-corrimiento-carga” (run programs). Esta forma de trabajar es para tener experiencia como “desarrollador” de algún proyecto. Nota. La función ctrl+c, ctrl+v no sirven para pegar o copiar en la terminal. Así que se debe hacer la selección de lo que se quiera copiar con el click derecho para copiar y así mismo para pegar.\r\nEditor de código: programa para desarrollar líneas de código, por ejemplo RStudio, Java, Spyder, Notepad++, Visual Studio Code, entre otros.\r\nRepositorio (repository). También se conoce repositorio de Git y es lo equivalente a un directorio, la diferencia es que se llama repositorio una vez que se inicializa en Git (ver detalles).\r\nInicializar un repositorio\r\nPara incializar un repositorio localmente en una carpeta ya existente, es necesario abrir la Terminal y situarnos dentro de dicha carpeta (usar cd). Posteriormente ingresamos el comando git init. El repositorio que creamos contiene los archivos que están dentro de la carpeta y apartir de ahora Git llevará el registro de los cambios en estos archivos.\r\nComandos principales\r\nLos comandos que se muestran a continuación se usan con el prefijo git y en minúsculas. Por ejemplo: git diff. Tales comandos se usan en la terminal una vez que estamos en el repositorio inicializado.\r\n\r\n\r\n\r\n\r\nAdd\r\nCuando se quieren agregar, borrar o modificar “archivos” (por ejemplo un archivo.R) en un repositorio hay que “avisar” a Git sobre esos cambios para que los agregue al historial de cambios en el código. Lo anterior se hace con la función add a la cual le procede el nombre del archivo que se va a añadir, por ejemplo: git add archivo.rmd. En caso de que se quieran añadir todas las actualizaciones de todos los archivos en el repositorio se usa el comando git add .\r\nCommit\r\nUna vez que se añadieron los cambios, hay que confirmarlos con este comando. La confirmación se hace con un mensaje que describa los cambios hechos. Por ejemplo:\r\ngit commit -m \"Este es el mensaje principal\" -m \"Aquí se puede hacer una descripción más detallada del cambio que se hizo al archivo correspondiente.\"\r\nStatus\r\nPermite conocer el estado en que se encuentran los archivos que se cambiaron o borraron antes de que se añadiera (add) y confirmara (commit) el cambio. Ejemplo de esto es lo que se muestra en la imagen de comandos principales.\r\nDiff\r\nEl comando git diff nos permite comparar los cambios entre el último commit realizado y los archivos que se encuentrar en el staging area (los cambios que hemos añadido con add sin hacer commit aún).\r\nLog\r\nEste comando nos muestra la lista de los commits que se han realizado en el repositorio. La lista incluye el hash de cada commit, su autor y el mensaje correspondiente. Aparecen ordenados del más reciente al más antiguo. Es posible que para visualizar toda la lista tengamos que usar la tecla de espacio hasta llegar al último commit, después del cual aparece END. Para salir de esta visualización, usamos la tecla q.\r\nLa siguiente imagen da una idea vizual de lo que ocurre en cada comando que aplicamos (incluyendo los que se explicarán con mayor detalle posteriormente).\r\n\r\n\r\n\r\n\r\n¿Qué es GitHub y para qué sirve?\r\nGitHub es un servicio de hosting para repositorios, el cual se puede usar de manera conjunta con Git. Nos permite conectar repositorios de manera remota, lo que facilita el trabajo colaborativo. Para trabajar con GitHub debemos contar con conexión a internet, la cual no es necesario cuando usamos solo Git. GitHub ofrece una interfaz gráfica que facilita el uso de Git para principiantes.\r\nLa importancia de esta plataforma radica en que no sólo se puede tener un control de los cambios que se hacen en el código (Git) sino que además estos pueden estar disponibles para un conjunto de personas que trabajen en el código de manera remota y asincrónica.\r\nDiferencias entre Git y GitHub\r\nGit\r\nGitHub\r\nSe puede usar sin GitHub\r\nDepende de Git para poder usarse\r\nTrabajo sin conexión a internet\r\nRequiere conexión a internet\r\nEl repositorio se almacena localmente\r\nEl repositorio se almacena en la nube\r\nTodos los comandos se introducen desde la Terminal\r\nPueden hacerse cambios usando la interfaz gráfica\r\nCrear una cuenta\r\nPara usar GitHub es necesario crear una cuenta en la página de GitHub para lo que se requiere una cuenta de correo y una contraseña.\r\nDe GitHub a Git\r\nUna vez que hemos creado una cuenta en GitHub podemos hacer al menos dos cosas: trabajar en los archivos de un repositorio creado por otro usuario de GitHub o crear nuestro propio repositorio en GitHub e invitar a nuestros colaboradores para trabajar en los archivos que ahí se encuentren.\r\nCrear un repositorio\r\nEntrar a tu cuenta en GitHub previamente creada.\r\nSeleccionar el + en la esquina superior derecha.\r\nSeleccionar la pestaña New repository.\r\n\r\n\r\n\r\n\r\nDar nombre y una breve descripción al repositorio.\r\nSeleccionar el botón Create repository\r\nNota: Es posible que quieras añadir un archivo de texto que contenga la descipción de lo que se ha hecho a lo largo del proyecto en el repositorio, para lo cual es necesario seleccionar el botón que dice: create a README.\r\n\r\n\r\n\r\n\r\nEste repositorio aún no está en la computadora local, por lo cual se debe “clonar” tal repositorio. En el siguiente apartado veremos cómo.\r\nClonar un repositorio\r\nClonar un repositorio significa “traer” (a tu computadora) archivos que están en algún repositorio de GitHub (puede o no ser tuyo) y no están en tu computadora. Es importante “traer” los archivos para que puedas modificarlos y este cambio se vea reflejado en GitHub. La palabra clonar es distinta a “descargar” porque una vez que se usó el comando ”clone”, no es necesario hacerlo en cada ocasión como cuando se hacen descargas. Con este comando es posible que las personas que colaboran en un proyecto (repositorio) tengan en sus computadoras los archios actualizados que se encuentran en el servidor de GitHub.\r\nLa forma de “traer” el código es usar el comando git clone dentro de la carpeta en la que se quiere guardar dicho repositorio con la terminal y posteriormente la liga de la dirección de GitHub. Para obtener la liga del repositorio de GitHub simplemente hay que seleccionar (en nuestro repositorio de GitHub) la palabra Code y posteriormente copiar y pegar la liga que ahí aparece.\r\nurl\r\n\r\n\r\n\r\n\r\nDe lo cual, en la terminal, obtenemos lo siguiente:\r\n\r\n\r\n\r\n\r\nHasta este momento sabemos cómo crear un repositorio en GitHub y conectarlo con nuestra máquina local lo que nos permite trabajar en equipo con archivos de código sin necesidad de conectarnos (como equipo de trabajo) en un horario particular. Los comandos para hacer las actualizaciones entre tu máquina local (Git) y el servidor (GitHub) se llaman pull-push. Tales comandos además de los comandos principales permiten lograr un trabajo en equipo eficiente.\r\nDe Git a GitHub\r\nEs posible conectar un repositorio local existente con un repositorio remoto. Primero es necesario crear un repositorio nuevo en GitHub y copiar la URL de éste. Usando el comando git remote add origin url (donde url es la URL del repositorio nuevo de GitHub) en la terminal y directorio inicializado, creamos la conexión entre el repositorio local y el remoto.\r\n\r\n\r\n\r\n\r\nPush\r\nPara subir los cambios realizados en el repositorio local al repositorio remoto (actualizar en GitHub los cambios que realizamos en la máquina local) es necesario usar el comando git push después de hacer add y commit. Como un repositorio puede estar conectado con más de un repositorio remoto y tener varias ramas, debemos especificar ambas cosas al hacer el push. Trabajando en el repositorio remoto origin y la rama main (default), el comando es git push origin main.\r\nPull\r\nPara “jalar” los cambios que se tienen en el repositorio remoto y actualizar los archivos en nuestro repositorio local se usa el comando git pull (en el repositorio local dentro de la terminal).\r\nTrabajo Colaborativo\r\nHasta ahora hemos visto la manera de trabajar un repositorio en Git y/o GitHub, así como los comandos para actualizar los cambios.\r\nSupongamos que en un proyecto, como puede ser el desarrollo de un videojuego, hay distintas partes del código donde se requiere hacer cambios o mejoras y es necesario no modificar el funcionamiento actual del proyecto hasta tener las otras partes completamente desarrolladas e incluirlas solo cuando ya sabemos que funcionan de manera adecuada. Además, queremos que distintos miembros del equipo trabajen en diferentes partes al mismo tiempo sin alterar el trabajo de los demás. Es en este caso donde el uso de las ramas de un repositorio es indispensable.\r\nBranch - Ramas\r\n\r\n\r\n\r\n\r\nUna rama (branch) de un repositorio puede considerarse como “un universo paralelo” del proyecto, pues los cambios que se realizan en ésta no afectan el contenido de las otras ramas existentes. Tener distintas ramas en un repositorio nos permite mantener distintas versiones de un mismo proyecto.\r\nAl crear una rama estamos copiando todo el contenido de la rama principal (main) hasta ese momento, incluyendo el historial de los commits realizados. Sin embargo, una vez que empezamos a modificar la nueva rama, el contenido de la rama principal no se ve alterado hasta que queramos fusionar las ramas.\r\nCada miembro del equipo puede crear una rama en el repositorio para trabajar en distintas partes sin afectar el trabajo de los demás (antes de fusionar). Por ejemplo, en el desarrollo de un videojuego, un integrante puede dedicarse a trabajar en aumentar las funciones de los lugares donde se desarrolla el juego mientras otro se dedica a trabajar en la configuración de los idiomas, etc.\r\nComandos para trabajar en ramas\r\ngit branch: Muestra el listado de las ramas existentes hasta el momento, además de indicar con un asterisco la rama en la que nos encontramos. Por default siempre existe la rama principal (main/master).\r\ngit checkout -b nombre_de_la_rama: Crea una rama con nombre nombre_de_la_rama.\r\ngit checkout nombre_de_la_rama: Sirve para cambiar de rama. En este caso, nos cambiamos a la rama que se llama nombre_de_la_rama. Ya que estamos posicionados en la rama en la que queremos trabajar usamos los comandos vistos anteriormente (add, commit, pull, push, etc.) para registrar los cambios. Para registrar los cambios en el repositorio remoto, debemos especificar en el push la rama donde se guardarán usando el comando git push --set-upstream origin nombre_de_la_rama.\r\ngit diff rama_1..rama_2: Muestra las diferencias entre las ramas rama_1 y rama_2.\r\ngit branch -d nombre_de_la_rama: Elimina la rama nombre_de_la_rama. Se utiliza cuando ya hemos hecho la fusión de esta rama con la rama principal y ya no la necesitamos.\r\nMerge - Fusión\r\nUna vez que hemos trabajado en una rama y realizamos todos los cambios necesarios, podemos fusionar estos cambios con el contenido de la rama principal. Para esto usamos el comando git merge rama_secundaria rama_principal, el cual fusiona la rama_secundaria con la rama_principal.\r\nConflictos al fusionar ramas\r\nSupongamos que mientras trabajabamos en una nueva rama, el contenido de la rama principal se modificó después de haber creado la nueva rama, por lo que ésta no incluye dichos cambios.\r\nUn conflicto que suele surgir al fusionar ramas es cuando no se han actualizado los cambios que sufrió la rama principal en nuestra rama secundaria. Esto se puede resolver de la siguiente forma:\r\nAñadir los cambios al repositorio local (add).\r\nConfirmar dichos cambios (commit).\r\nActualizar el contenido de la rama principal en la rama secundaria (pull origin main).\r\nHacer la fusión (push –set-upstream origin nombre_de_la_rama).\r\nGenerar un pull request para hacer la fusión entre las ramas.\r\n\r\nRStudio - Git - GitHub\r\nEs posible conectar con Git y GitHub desde RStudio, lo cual tiene la ventaja de que al modificar archivos en RStudio podemos registrar los cambios en el repositorio sin la necesidad de movernos a la Terminal. Para hacer esto posible, es necesario verificar primero que Git esté instalado correctamente y R y RStudio estén actualizados (con una versión de R de 4.0 o más reciente debería funcionar correctamente). Una vez cumplidos estos requisitos, debemos verificar que Git esté conectado con RStudio en Tools -> Global options -> Git/SVN verificando que el directorio de git.exe que se solicita sea el correcto.\r\nConectar un proyecto nuevo de RStudio con Git\r\nLa forma más sencilla de comenzar a trabajar Git con RStudio es creando un nuevo proyecto desde RStudio y seleccionar la opción que se muestra:\r\n\r\n\r\n\r\n\r\nCon esto se creará un repositorio de Git localmente en conjunto con el proyecto de R. Podemos agregar archivos ya existentes a este repositorio para comenzar a registrar los cambios con Git.\r\nClonar un repositorio de GitHub desde RStudio\r\nPodemos clonar un repositorio de GitHub a nuestra computadota directamente desde RStudio creando un nuevo proyecto y seleccionando la opción Version control.\r\n\r\n\r\n\r\n\r\nPosteriormente, pegamos el link de GitHub del repositorio que queremos clonar.\r\nPara realizar los comandos previamente presentados (como add, commit, pull, push) sin necesidad de usar la terminal tenemos que:\r\nAbrir un proyecto de R creado con Version Control de Git.\r\nAbrir un archivo (.R, .rmd, etc.) dentro del proyecto.\r\nSeleccionar la pestaña de Git.\r\nPara los comandos:\r\nadd: seleccionar la palomita.\r\ncommit: seleccionar Commit.\r\npush: seleccionar la flecha verde que apunta hacia arriba.\r\npull: seleccionar la flecha azul que apunta hacia abajo.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-04T20:30:05-06:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-02-rmarkdown/",
    "title": "RMarkdown",
    "description": "Este tutorial te servirá para aprender a crear archivos .rmd.",
    "author": [
      {
        "name": "Carlos & DataCamp",
        "url": "https://www.datacamp.com/users/sign_in"
      }
    ],
    "date": "2021-02-20",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nCapítulo 4. Personalización del informe.Tabla de contenidos.\r\nCrear un reporte con parámetro.\r\nMultiples parámteros\r\nPersonalizar el R MarkdownCuerpo del archivo\r\nCódigos chunk\r\nÍndice del archivo\r\nEncabezado del archivo\r\n\r\n\r\n\r\n\r\n  #TOC {\r\n    color: #724401;\r\n    font-size: 16px;\r\n    background-color: #FBECD1;\r\n    border-color: #958303;\r\n  }\r\n  h1.title {\r\n    color: #6D4101;\r\n    background-color: #FDFBEF;\r\n    opacity: 0.9;\r\n    font-size: 50px;\r\n  }\r\n  h4.author {\r\n    color: #012A6D;\r\n    background-color: #FDFBEF;\r\n    font-size: 30px;\r\n  }\r\n  h4.date {\r\n    color: #7299D9;\r\n    background-color: #FDFBEF;\r\n  }\r\n  body {\r\n    color: #08142A;\r\n    background-color: #FDFBEF;\r\n  }\r\n  pre {\r\n    color: #08142A;\r\n    background-color: #FEF9D7;\r\n  }\r\n\r\n\r\nCrear el archivo\r\nPara poder crear el archivo R Markdown, puedes usar RStudio. En la pestaña “New File” das click, luego seleccionas “R Markdown” y listo. Este documento te servirá para aprender a editar lo que aparece dentro del archivo.\r\n\r\n¿Para qué sirven los archivos R Markdown?\r\nLa información puede presentarse de manera “reproducible” lo que significa que se pueden hacer modificaciones al archivo que hagan ver a las personas que lean los cambios que afecten los resultados deseados.\r\nCapítulo 1. Aproximación a R Markdown\r\nPara poder ver los beneficios y herraminetas que tiene R Markdown, haremos uso de información relacionada con la inversión que ha hecho el Banco Mundial en proyectos de servicios públicos en los diferentes países del mundo desde el 2012 hasta el 2018.\r\nPrimero se crea una sección de código o “chunk” para dar a conocer la información, un comando que facilita agregar secciones de código es ctrl + alt + i. En este caso incluiremos la información que cargamos en el chunk inicial.\r\n\r\n\r\n#Es muy recomendable que las paqueterías que se desean usar se carguen previo al análisis\r\nlibrary(readr)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n#Las paqueterías aquí presentadas se utilizarán a lo largo del código.\r\n\r\ninvestment_annual_summary <-\r\n  read_csv(\r\n    \"https://assets.datacamp.com/production/repositories/5756/datasets/d0251f26117bbcf0ea96ac276555b9003f4f7372/investment_annual_summary.csv\"\r\n  )\r\ninvestment_services_projects <-\r\n  read_csv(\r\n    \"https://assets.datacamp.com/production/repositories/5756/datasets/78b002735b6f620df7f2767e63b76aaca317bf8d/investment_services_projects.csv\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\ninvestment_annual_summary\r\n\r\n\r\n# A tibble: 42 x 3\r\n   fiscal_year region                          dollars_in_millions\r\n         <dbl> <chr>                                         <dbl>\r\n 1        2012 East Asia and the Pacific                      2548\r\n 2        2012 Europe and Central Asia                        2915\r\n 3        2012 Latin America and the Caribbean                3680\r\n 4        2012 Middle East and North Africa                   2210\r\n 5        2012 South Asia                                     1312\r\n 6        2012 Sub-Saharan Africa                             2733\r\n 7        2013 East Asia and the Pacific                      2873\r\n 8        2013 Europe and Central Asia                        3261\r\n 9        2013 Latin America and the Caribbean                4822\r\n10        2013 Middle East and North Africa                   2038\r\n# ... with 32 more rows\r\n\r\nNotemos que se imprime la parte del código y lo que “almacena” esa variable, es decir el código y sus resultados.\r\nTambién podemos añadir información antes del reporte que se analizará, por ejemplo la descripción de la base de datos y la fuente consultada: “The investment_annual_summary dataset provides a summary of the dollars in millions provided to each region for each fiscal year, from 2012 to 2018.”\r\nDentro del chunk (sección de código) no se puede poner texto, a menos que se escriba como comentario (lo cual se hace como en el código normal, es decir, con un gato #), por ejemplo:\r\n\r\n\r\n#Este es un comentario para ejemplificar lo que escribí arriba.\r\ninvestment_annual_summary\r\n\r\n\r\n\r\nEditar texto\r\nTítulos\r\nSi queremos tener una mejor presentación y organización, podemos agregar títulos o subtítulos. Para crear un título se debe usar el símbolo gato (#). Entre más gatos (#) usemos, más pequeño será el título:\r\n#### Título 1\r\n##### Título 2\r\n###### Título 3\r\nSe vuelve en:\r\nTítulo 1\r\nTítulo 2\r\nTítulo 3\r\nResaltar información\r\nTambién es posible querer alguna edición de texto que permita al lector tener atención en algo, por ejemplo:\r\n_itálicas_, *itálicas*;\r\n\r\n__bold__, **bold**;\r\n\r\n~~tachar~~.\r\nQue se ve como:\r\nitálicas, itálicas;\r\nbold, bold;\r\ntachar.\r\nAlineación del código\r\nJustificado #<div style=\"text-align: justify\"> al inicio y #<div/> al final.\r\nCentrado #<div style=\"text-align: center\"> al inicio y #<div/> al final.\r\nA la izquierda #<div style=\"text-align: left\"> al inicio y #<div/> al final.\r\nFormato tipo código\r\nPodemos hacer que el texto escrito se vea en el formato del código (para dar a notar que nos referimos a un objeto del código) de la forma investment_services_projects. Para obtener esta esritura se pone el texto investment_services_projects dentro de dos comillas invertidas ``.\r\nAgregar referencias\r\nEnlaces de internet\r\nAgregar parablas de referencia al link del cual obtuvimos la información es algo muy útil, eso se hace de la siguiente forma: primero se colocan corchetes dentro de los que se ecribirá la palabra que el lector seleccionará y se dirigirá a la página web que desea mostrar, posteriormente se coloca un par de paréntesis dentro de los que estará la liga de la página web. Es importante que no haya espacios entre los corchetes y los paréntesis.\r\nEjemplo. [enlace] (dirección.de.enlace)\r\nLa información aquí presentada viene del Banco Mundial.\r\nEnlaces al propio texto\r\nPara poder llegar a alguna parte específica del texto, podemos usar una referencia hacia el mismo poniendo en el título al que queremos dirigirnos la siguiente sintáxis: #### Título 1 {#tit1} para poder llegar a dicho título ponemos lo siguiente:[Enlace a titulo1] (#tit1) en el texto del cual querramos llegar al título.\r\nAgregar imágenes\r\nPodemos también agregar imágenes con una sintáxis parecida a la anterior, es decir, poner un par de corchetes después de un signo de admiración y posterior a los corchetes añadir el enlace donde se encuentra la imagen (entre paréntesis), como sigue: ![](enlace).\r\nEjemplo.\r\n\r\nLaTex\r\nUna sección que había olvidado agregar es el uso de la sintáxis de LaTex en este tipo de archivos rmd. Es decir que se pueden escribir fórmulas de manera sencilla con el conocimiento previo de formulación o sintáxis. Para poder hacer uso de esta sintáxis, las fórmulas deben añadirse entre dos signos de pesos ($). Si por ejemplo ponemos definiciones como:\r\n\\[ \\mathbb{E}[X]:= \\int_{\\Omega}Xd\\mathbb{P}\\] Donde \\(X:\\Omega\\rightarrow \\mathbb{R}\\) es una función borel medible (variable aleatoria) y \\(\\mathbb{P}:\\mathscr{F}\\rightarrow[0,1]\\) es una medida de probabilidad con \\(\\mathscr{F}\\) una \\(\\sigma-álgebra\\) de subconjuntos del espacio muestral \\(\\Omega\\).\r\nEl encabezado YAML\r\nEl encabezado YAML (Hierarchical data structures) es la parte del archivo R Markdown que contiene, entre otras cosas, el título del archivo, la (el) autora (autor) del mismo, la fecha de creación y el tipo de formato en el que se “tejerá” o cargará el archivo (HTML ó PDF).\r\n\r\nPodemos empezar cambiando la forma en que se pone la fecha, en general esta fecha aparece por defecto con el día en que se crea el archivo. Con el código date: ‘r format(Sys.Date(),’%d de %B del %Y’)’ y algunos otros podremos poner la sintáxis de la fecha a nuestra conveniencia. En el ejemplo en negritas la fecha en el archivo aparecerá como: 05 de marzo del 2021 (suponiendo que la fecha en la que se “teje” el archivo es la ejemplificada).\r\nCapítulo 2. Análisis de información.\r\nFiltrar información\r\nVeamos el caso de los proyectos de inversión realizados en Indonesia. Para ello usamos la función filter de la paquetería dplyr.\r\nNota: es recomendable hacer varias secciones de código (chunks) y que cada chunk tenga un nombre referente a lo que se escribe en el código.\r\n\r\n\r\nindonesia_investment_projects <-\r\n  investment_services_projects %>% filter(country == \"Indonesia\")\r\nindonesia_investment_projects\r\n\r\n\r\n# A tibble: 39 x 13\r\n   date_disclosed      country ifc_country_code sector project_name\r\n   <dttm>              <chr>   <chr>            <chr>  <chr>       \r\n 1 2018-10-12 00:00:00 Indone~ INS              Finan~ KEB Hana In~\r\n 2 2018-08-10 00:00:00 Indone~ INS              Finan~ JV Housing ~\r\n 3 2018-08-03 00:00:00 Indone~ INS              Touri~ Trans Corpo~\r\n 4 2018-07-23 00:00:00 Indone~ INS              Infra~ Riau IPP    \r\n 5 2018-04-27 00:00:00 Indone~ INS              other  SSIA Ind Est\r\n 6 2018-04-25 00:00:00 Indone~ INS              Infra~ PT Bajraday~\r\n 7 2018-01-10 00:00:00 Indone~ INS              Agrib~ Nabati Indo~\r\n 8 2017-11-14 00:00:00 Indone~ INS              Finan~ MBK Loan 20~\r\n 9 2017-07-05 00:00:00 Indone~ INS              Finan~ IIF USD Loan\r\n10 2017-04-12 00:00:00 Indone~ INS              Finan~ Indosurya F~\r\n# ... with 29 more rows, and 8 more variables: project_number <dbl>,\r\n#   company_name <chr>, status <chr>,\r\n#   ifc_investment_for_risk_management_million_usd <dbl>,\r\n#   ifc_investment_for_guarantee_million_usd <dbl>,\r\n#   ifc_investment_for_loan_million_usd <dbl>,\r\n#   ifc_investment_for_equity_million_usd <dbl>,\r\n#   total_ifc_investment_as_approved_by_board_million_usd <dbl>\r\n\r\nSi queremos información más específica, podemos usar de ejemplo la fecha de inicio y fin de un año fiscal.\r\n\r\n\r\nindonesia_investment_projects_2012 <-\r\n  investment_services_projects %>% filter(country == \"Indonesia\",\r\n                                          date_disclosed >= \"2011-07-01\",\r\n                                          date_disclosed <= \"2012-06-30\")\r\nindonesia_investment_projects_2012\r\n\r\n\r\n# A tibble: 3 x 13\r\n  date_disclosed      country ifc_country_code sector project_name\r\n  <dttm>              <chr>   <chr>            <chr>  <chr>       \r\n1 2012-04-27 00:00:00 Indone~ INS              Agrib~ FHP Indones~\r\n2 2012-04-03 00:00:00 Indone~ INS              Finan~ LMS Toll Pr~\r\n3 2012-02-27 00:00:00 Indone~ INS              Finan~ CIMB Niaga ~\r\n# ... with 8 more variables: project_number <dbl>,\r\n#   company_name <chr>, status <chr>,\r\n#   ifc_investment_for_risk_management_million_usd <dbl>,\r\n#   ifc_investment_for_guarantee_million_usd <dbl>,\r\n#   ifc_investment_for_loan_million_usd <dbl>,\r\n#   ifc_investment_for_equity_million_usd <dbl>,\r\n#   total_ifc_investment_as_approved_by_board_million_usd <dbl>\r\n\r\n\r\n#Si queremos conocer la inversión total que se hizo en Indonesia podemos añadir una columna:\r\nindonesia_investment_projects_2012_total <-\r\n  indonesia_investment_projects_2012 %>% summarize(\r\n    sum_total_investments = sum(\r\n      total_ifc_investment_as_approved_by_board_million_usd ,\r\n      na.rm = T\r\n    )\r\n  )\r\n\r\n\r\n\r\nInsertar resultados en el texto\r\nPara poder usar algún resultado calculado dentro de los chunks en el texto, se usa la sintáxis ‘r resultado_deseado’ (en vez de las comillas simples, se usan comillas invertidas), por ejemplo:\r\nThe total investment amount for all projects in Indonesia in the 2012 fiscal year was 100 million dollars. Lo cual se obtuvo de la sintáxis ‘r indonesia_investment_projects_2012_total’. Notemos que esto es parecido a editar el texto en forma de código, la diferencia es que añadimos una r y un espacio antes de seleccionar el resultado_deseado.\r\nLo anterior es un ejemplo de cómo se pueden plasmar en el documento los datos que se han calculado hasta el momento en el código.\r\nEs importante que los resultados se pongan posterior al cálculo en los chunks porque al correr el archivo de R Markdown se hace una lectura ordenada del mismo y por tanto si se requieren resultados antes de su cálculo, habrá un error en la carga del archivo.\r\nAñadir gráficas\r\nAñadir gráficas es muy similar que añadir código, primero se crea un chunk y luego con la función plot o ggplot se crea la gráfica.\r\nSi se quieren gráficas que puedan ser mejor editadas, usar la paquetería ggplot2 es lo más recomendable. En este caso debes cargar dicha paquetería en el primer chunk.\r\nEjemplo:\r\n\r\n\r\nggplot(\r\n  investment_annual_summary,\r\n  aes(x = fiscal_year, y = dollars_in_millions, color = region)\r\n) + geom_line() + labs(title = 'Inversión en Proyectos',x = \"Año fiscal\",y = 'Inversión total en millones de dólares')+theme_classic()\r\n\r\n\r\n\r\n\r\nPosiblemente no queremos que el código para realizar la gráfica aparezca en el archivo, así que podemos usar echo = FALSE (los detalles aquí)\r\n\r\n\r\n\r\nDimensiones\r\nAnálogo a la especificación echo = FALSE, las funciones siguientes se colocan en el inicio de los chunks.\r\nUsemos las especificaciones fig.width (ancho) y fig.height (alto) para modificar las dimensiones de los gráficos que aparezcan en el documento “tejido”. Estas funciones se hacen al inicio del chunk, por lo que no puedes ver su aplicación en lo que aparecerá al “tejer” el archivo.\r\n\r\n\r\n\r\nUna forma más resumida es con el comando fig.dim al cual se le especifica un vector fig.dim = c(ancho, largo).\r\nComo a veces no conocemos las dimensiones precisas de los diagramas que queremos presentar, podemos usar la especificación out.width que se usa con un porcentaje (por ejemplo 30%) para que tome el 30% del aspecto en el R Markdown.\r\n\r\n\r\n\r\nOtro argumento que se puede agregar es la alineación del gráfico en el archivo, la cual puede ser izquierda (‘left’), centro (‘center’) o derecha (‘right’) con la especificación fig.align, por ejemplo: fig.align='right'\r\n\r\n\r\n\r\nAlgo que también nos puede interesar es una descripción o título del gráfico que aparezca en el R Markdown, esto se hace con el comando fig.cap.\r\n\r\n\r\n\r\nFigure 1: Figure 1.1 Esto es un ejemplo de descripción de la gráfica que se muestra\r\n\r\n\r\n\r\nCapítulo 3. Mejorar el código\r\nCrear listas.\r\nPara crear una lista se usa generalmente un asterísco, un guión medio o algún otro síbolo para iniciarla, por ejemplo:\r\nDías de entre semana\r\nLunes\r\nMartes\r\nMiércoles\r\nJueves\r\nViernes\r\n\r\nDías en fines de semana\r\nSábado\r\nDomingo\r\n\r\nLo anterior se hace usando el guión medio o asterísco, luego un espacio y al final la palabra. Si se desea añadir más subtextos solo se hace una sangría extra.\r\nEs importante que antes y después de cada lista dejes un espacio para que aparezca en el R Markdown “tejido” (En el Knit).\r\nTambién podemos hacer listas numeradas:\r\nPrimer elemento.\r\nAquí las cosas del primer elemento\r\nSegundo elemento.\r\nAquí las cosas del segundo elemento\r\nTercer elemento.\r\nAquí las cosas del tercer elemento.\r\nCrear tablas\r\nPara hacer una tabla necesitamos un chunk de R con el nombre tables además del código siguiente:\r\n\r\n\r\nknitr::kable(indonesia_investment_projects_2012_summary, col.names = c(\"Nombre del Proyecto\", \"Status\", \"Total de Inversión\"), align = \"rcl\", caption = \"Tabla 1.1\")\r\n\r\n\r\nTable 1: Tabla 1.1\r\nNombre del Proyecto\r\nStatus\r\nTotal de Inversión\r\nFHP Indonesia I\r\nActive\r\n25\r\nLMS Toll Project\r\nHold\r\nNA\r\nCIMB Niaga Sr.\r\nCompleted\r\n75\r\n\r\nLa función kable nos ayuda a crear tablas en un formato de caracteres, es decri que no se pueden hacer modificaciones dentro de esta tabla.\r\nNombre de las columnas\r\nPara agregar el nombre que queremos a las columnas, usamos el argumento col.names\r\nAlineación de las columnas\r\nDentro de la función kable agregamos el argumento para el alineado de cada columna llamado align. Si queremos que la columna uno se aline a la derecha, la dos al centro y la tres a la izquierda, debemos usar el comando aling = \"rcl\" que significa r ight, c enter, l eft.\r\nTítulo de la tabla\r\nAñadimos el argumento caption en la función kable\r\nHay otras formas de crear tablas que tengan mejores ediciones, con una sintaxis de HTML o Latex\r\nSi deseas conocer más información sobre la edición de R Markdown, da click aquí\r\nOpciones de Código Chunk\r\nPara poder manejar mejor los fragmentos de código en el archivo de presentación podemos incluirlo o no. Las funciones que aquí se presentan deben agregarse en el encabezado de cada chunk, por ejemplo:\r\n  ``{r, echo=FALSE}\r\n  Chunk de código\r\n  ``\r\nEval\r\nSi se desea que el código no se evalúe (no se calcule) entonces al inicio del chunk se agrega una especificación eval = FALSE. Esto evitará que se ejecute esa línea de código aun cuando éste aparezca en el archivo.\r\nInclude\r\nSi se desea que el código se cargue pero que no aparezca éste ni sus resultados en el archivo Markdown (no se vea el código ni los resultados que calcula) entonces podemos usar la opción include = FALSE. Esta opción hace invisible el código y los resultados por defecto pero sí permite usar los mismos como parte del texto en el archivo (ver sección.)\r\nEcho\r\nSi queremos que no aparezca el código y sí los resultados entonces se puede usar la especificación echo = FALSE. Es una práctica usual cuando se presentan gráficas, porque se quiere el gráfico pero no el código con el cual se realiza.\r\nCollapse\r\nSe puede usar collapse = TRUE si queremos que el código presentado en el archivo de R Markdown aparezca en el mismo espacio de chunk. Ejemplo:\r\ncollapse = FALSE por defecto. Aquí se separan los resultados en dos partes del código.\r\n\r\n\r\ninvestment_annual_summary\r\n\r\n\r\n# A tibble: 42 x 3\r\n   fiscal_year region                          dollars_in_millions\r\n         <dbl> <chr>                                         <dbl>\r\n 1        2012 East Asia and the Pacific                      2548\r\n 2        2012 Europe and Central Asia                        2915\r\n 3        2012 Latin America and the Caribbean                3680\r\n 4        2012 Middle East and North Africa                   2210\r\n 5        2012 South Asia                                     1312\r\n 6        2012 Sub-Saharan Africa                             2733\r\n 7        2013 East Asia and the Pacific                      2873\r\n 8        2013 Europe and Central Asia                        3261\r\n 9        2013 Latin America and the Caribbean                4822\r\n10        2013 Middle East and North Africa                   2038\r\n# ... with 32 more rows\r\n\r\nggplot(\r\n  investment_annual_summary,\r\n  aes(x = fiscal_year, y = dollars_in_millions, color = region)\r\n) + geom_line() + labs(title = 'Inversión en Proyectos',x = \"Año fiscal\",y = 'Inversión total en millones de dólares')+theme_classic()\r\n\r\n\r\n\r\n\r\ncollapse = TRUE se tiene que especificar. Aquí se “juntan” los resultados del código.\r\n\r\n\r\ninvestment_annual_summary\r\n\r\n\r\n# A tibble: 42 x 3\r\n   fiscal_year region                          dollars_in_millions\r\n         <dbl> <chr>                                         <dbl>\r\n 1        2012 East Asia and the Pacific                      2548\r\n 2        2012 Europe and Central Asia                        2915\r\n 3        2012 Latin America and the Caribbean                3680\r\n 4        2012 Middle East and North Africa                   2210\r\n 5        2012 South Asia                                     1312\r\n 6        2012 Sub-Saharan Africa                             2733\r\n 7        2013 East Asia and the Pacific                      2873\r\n 8        2013 Europe and Central Asia                        3261\r\n 9        2013 Latin America and the Caribbean                4822\r\n10        2013 Middle East and North Africa                   2038\r\n# ... with 32 more rows\r\n\r\n\r\nggplot(\r\n  investment_annual_summary,\r\n  aes(x = fiscal_year, y = dollars_in_millions, color = region)\r\n) + geom_line() + labs(title = 'Inversión en Proyectos',x = \"Año fiscal\",y = 'Inversión total en millones de dólares')+theme_classic()\r\n\r\n\r\n\r\n\r\nWarnings, mensajes y errores\r\nAnálogo a las especificaciones anteriores, las funciones siguientes se colocan en el inicio de los chunks por ejemplo:\r\n  ``{r, echo=FALSE, warning=FALSE}\r\n      ggplot(indonesia_investment_projects_2012)\r\n  ``\r\nWarnings\r\nSi no queremos que aparezcan “Warnings” en el archivo final, agregamos el argumento warning = FALSE al inicio de cada chunk.\r\nSin Warning:\r\n\r\nCon Warning (por defecto):\r\n\r\n\r\nMensajes\r\nEs probable que también se de información extra de las tablas que se descargaron, si no queremos que esos mensajes aparezcan, podemos agregar la opción message = FALSE\r\nCon mensaje (por defecto):\r\n\r\n\r\ninvestment_services_projects <-\r\nread_csv(\r\n\"https://assets.datacamp.com/production/repositories/5756/datasets/78b002735b6f620df7f2767e63b76aaca317bf8d/investment_services_projects.csv\"\r\n)\r\n\r\n\r\n\r\n\r\n\r\nSin mensaje:\r\n\r\n\r\ninvestment_services_projects <-\r\n  read_csv(\r\n\"https://assets.datacamp.com/production/repositories/5756/datasets/78b002735b6f620df7f2767e63b76aaca317bf8d/investment_services_projects.csv\"\r\n  )\r\n\r\n\r\n\r\n\r\nErrores\r\nSi queremos hacer notar cuáles son los errores en algúno de los chunks que hemos creado, se usa el argumento error = TRUE. Por defecto el argumento de error es FALSE y esto impide que el archivo de R Markdown se “teja” (Knit-ea) cuando hay errores en algún chunk. Es preferible que esta opción se aplique de manera global al inicio del R Mardown para que se identifiquen y corran todos los chunks con sus respectivos errores.\r\nCapítulo 4. Personalización del informe.\r\nTabla de contenidos.\r\nMejor conocida como “índice”, la tabla de contenidos nos permitirá hacer referecia a los contenidos dentro del archivo R Markdown. Es útil porque si se quiere llegar a una sección particular del archivo para enfatizar en un tema, solo se le da click en el apartado que resalta en color azul para llegar a leer dicha parte del documento.\r\nPara crear dicha tabla se debe agregar la sintáxis siguiente (en el encamezado YAML):\r\nhtml_document:\r\ntoc: true representa que sí se quiere hacer un índice (tabla de contenidos)\r\ntoc_float: true Solo para HTML sirve para que el índice aparezca en todo tiempo del lado izquierdo del documento. Advertencia: de usarse los siguientes dos “subapartados” (o especificaciones) se debe omitir la palabra true.\r\ncollapsed: false por defecto collapse: true, lo cual implica que el menú estará siempre retraido a los títulos superiores, es decir que si se eligen poner subtitulos en el índice, estos no aparecerán. Al hacer collapsed: false logramos que no solo los títulos mayores se puedan ver, sino que también los subtítulos.\r\nsmooth_scroll: false por defecto smooth_scroll: true, es decir que se hará una “animación” (o transición suave) para desplazarse al título correspondiente. Si se usa smooth_scroll: false entonces se evitará el movimiento y llegaremos al título requerido “inmediatamente” (sin suavidad).\r\n\r\ntoc_depth: 1 para determinar el número de títulos en jerarquía a considerar. Si por ejemplo es necesario que aparezcan los capítlos con subcapítulos, entonces se usa un 2, indicando que el título mayor (que se pone con ##, por ejemplo) así como sus apartados (los que tengan ###, por ejemplo) se mostrarán en dicho índice.\r\nnumber_sections: false para enumerar los títulos en el índice. Si se escribe true entonces se enumerarán los apartados del documento. En esta sección notemos que la numeración empieza en cero (0) cuando el títuloayor se ha puesto con dos gatos (##), si se iniciara el título mayor con un gato (#) entonces la numeración (si se desea) iniciará en 1.\r\n\r\nCrear un reporte con parámetro.\r\nEn este R Markdown hemos trabajado con información especial para Indonesia. ¿Qué pasa cuando nos piden el mísmo análisis pero de otro país? O lo que es peor, ¿qué pasa si nos piden reportes de cada país en América? La manera de solucionar esto es através de los parámetros.\r\nSi queremos que el reporte tenga la misma estructura pero información un tanto diferente (que sea, por ejemplo, la inversión que se ha hecho en México por parte del Banco Mundial) entonces la herramienta que se presenta a continuación es de total utilidad para que los informes se creen con cambiar 10 carácteres y no 1000 líneas de reporte.\r\nLa forma de hacer esto es en el encabezado YAML. Se agrega (como en este documento) la siguiente sintáxis:\r\nparams:\r\ncountry: Indonesia\r\n\r\nEs importante notar que nosotros decidimos el nombre del parámetro que deseamos modificar en el código.\r\nAdvertencia sobre la generalidad del código para ser “replicable.” Si se quiere hacer uso de esta automatización, hay que tener especial atención en que todas las referencias a dicho parámetro (que en este ejemplo fue el país) sean modificables.\r\n¿Dónde debemos poner atención?\r\nSi se tenía el comando: country == \"Indonesia\" se deberá sustituir por country == params$country dado que al cambiar el parámetro llamado “country” en el encabezado YAML, también se cambiará la referencia y, por ende, el análisis.\r\nSi se usa el nombre del país en alguna parte del texto, debe hacerse consistente la referencia al país, si por ejemplo aparece en el texto “… la inversión que hizo el Banco Mundial para proyectos de servicios en Indonesia…” entonces es preferible que el texto esté escrito como “… la inversión que hizo el Banco Mundial para proyectos de servicios en ‘r params$country’…” y en vez de usar las comillas simples, se usen las comillas inversas `.\r\nSi en el nombre de la gráfica se hace uso del nombre, mejor poner títulos más genéricos o cargar el nombre en un vector para ponerlo como título.\r\nEn el título del reporte también puede aparecer el país, por lo que se puede poner la misma sintáxis del ejemplo 2 para cambiar dicho país\r\nMultiples parámteros\r\nSe pueden agregar más parámetros como el año, el tipo de proyecto, entre otros. Esto es de utilidad si se requiere, por ejemplo, hacer un análisis de la infersión por año fiscal para cada país y además que los proyectos estén activos actualmente.\r\nSi queremos agregar el año fiscal de estudio y las fechas de inicio y fin del mismo podemos agregar a la sintáxis anterior lo siguiente:\r\nparams:\r\ncountry: Indonesia\r\nyear_start: 2011-07-01\r\nyear_end: 2012-06-30\r\nfy: 2012\r\n\r\nAnálogo a lo explicado en la sección anterior, se debe tener cuidado para que el documento sea lo más general posible y la referencia a los parámetros agregados se hagan.\r\n(Ver ejemplo completo en el documento “Ejemplo R Markdown”)\r\nPersonalizar el R Markdown\r\nPara poder tener los colres de fonto, fuente, color del título, entre otros detalles, es útil agregar algunas líneas de código que nos ayuden a esto.\r\nEn principio veremos los comandos necesarios que deben ir al inicio de todo el archivo R Markdown. Luego se explicará cómo hacer para que creemos nuestro propio estilo sin necesidad de especificar todos los comandos en el mismo archivo de R Markdown, sino hacer una referencia a un archivo con las especificaciones que deseamos.\r\nPara darle un estilo específico necesitamos poner lo que queremos cambiar entre la sintáxis <style> (al inicio) y <\/style> (al final).\r\nCuerpo del archivo\r\nSi se desea hacer un cambio de color de letra en todo el “cuerpo” del documento, usamos la sintáxis:\r\n<style>\r\n  body{\r\n    color: blue;\r\n  }\r\n<\/style>\r\nAnálogo al código anterior se puede agregar al “cuerpo” del documento el color de fondo, tipo de letra y tamaño de la letra. En tal caso tendremos el ejemplo siguiente:\r\n<style>\r\n  body{\r\n    color: #024B3B;\r\n    font-family: Calibri;\r\n    background-color: #F2FCFA;\r\n  }\r\n<\/style>\r\nNotemos que los colores no están dados de manera “regular”. Esos colores se obtuvieron de la forma hexadecimal que permite obtener una amplia gama de colores. Es importante incluir el símbolo gato “#” antes de cada código hexadecimal para que se pueda añadir dicho color.\r\nCódigos chunk\r\nLo anterior es en general para el texto, pero si queremos un color especial para las líneas de código ponemos (despúes de cerrar el body) lo siguiente:\r\npre{\r\n  color: #273A00;\r\n  background-color: #E4F9BB;\r\n}\r\nÍndice del archivo\r\nSi se desea también cambiar el diseño del índice (tabla de contenido) agregamos (de preferencia antes del body) lo siguiente:\r\n#TOC {\r\n  color: #022A3D;\r\n  font-family: Calibri;\r\n  font-size: 16px;\r\n  boder-color: #026696;\r\n}\r\nEncabezado del archivo\r\nSi además queremos agregar propiedades particulares al encabezado (título, fecha y autor) entonces usamos (de preferencia antes de #TOC):\r\n#header {\r\n  color: #081137;\r\n  background-color: #C6DBF4;\r\n  opacity: 0.6;\r\n  font-family: Calibri;\r\n  font-size: 20px;\r\n}\r\nSi queremos tener detalle tambíen por cada parte del encabezado (el título y el autor tengan distinto diseño, por ejemplo) entonces usamos el código:\r\nh1.title {\r\n  color: #092547;\r\n  background-color: #375477;\r\n  opacity: 0.4;\r\n  font-family: Calibri;\r\n  font-size: 40px;`\r\n  }\r\nh4.author {\r\n  color: #223F61;\r\n  font-family: Calibri;\r\n  }\r\nh4.date {\r\n  color: #7C99BB;\r\n  font-family: Calibri;\r\n  }\r\nEjemplo:\r\nNotemos que la edición de la fuente, colores y demás temrinaría siendo el sifuiente código:\r\n  <style>\r\n    #TOC {\r\n      color: #022A3D;\r\n      font-family: Calibri;\r\n      font-size: 16px;  \r\n      boder-color: #026696;\r\n      }\r\n    h1.title {\r\n      color: #092547;\r\n      background-color: #375477;\r\n      opacity: 0.4;  \r\n      font-family: Calibri;\r\n      font-size: 40px;\r\n      }\r\n    h4.author {\r\n      color: #223F61;\r\n      font-family: Calibri;\r\n      }\r\n    h4.date {\r\n      color: #7C99BB;\r\n      font-family: Calibri;\r\n      }\r\n    body{\r\n      color: #024B3B;\r\n      font-family: Calibri;\r\n      background-color: #F2FCFA;  \r\n      }\r\n    pre{\r\n      color: #273A00;\r\n      background-color: #E4F9BB;\r\n      }\r\n  <\/style>\r\nPara evitar tantas líneas de código en cada archivo, podemos hacer referencia a un archivo que contenga todas las especificaciones del estilo R Markdown. Esto se hace en el encabezado YAML luego del html_document de la forma:\r\nhtml_document:\r\n  css: nombre_del_archivo_.css_con_extensión_css\r\nLa extensión es llamada css por el significado que es Cascading Style Sheet (CSS).\r\nEste archivo tiene las especificaciones de forma manual, sin embargo para encontrar más contenido sobre la forma de crear los archivos con extensión css, puede hacer diferentes consultas como: esta o esta e incluso esta.\r\nEn general se descarga primero el programa Notepad++ aquí, luego crea un archivo con el nombre que desea (en el caso de Ejemplo R Markdown el archivo se llama style) y escribe la sintáxis previamente mencionada sin los #, guarda el archivo en un formato css en la misma carpeta donde tiene el R Markdown y por último agrega la sintáxis que se encuentra prvio a la explicación.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  (function () {\r\n    var script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src  = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\";\r\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n  })();\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "https://www.uv.es/vcoll/imagenes/tt_8_crear_rmarkdown_1.png",
    "last_modified": "2021-03-04T20:30:05-06:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Bienvenido al Blog",
    "description": "Estamos felices por haber podido crear nuestro primer Blog con Distill y esperamos que puedas aprender mucho al respecto de este contenido.",
    "author": [
      {
        "name": "Carlos & Yanely",
        "url": "https://reverent-elion-c8f759.netlify.app/tutorial-de-git-y-github"
      }
    ],
    "date": "2021-02-20",
    "categories": [],
    "contents": "\r\nEs importante que las cosas que vayamos aprendiendo a rellenar los espacios vacíos para que todo salga chévere.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-04T20:30:06-06:00",
    "input_file": {}
  }
]
